<frame id="kek" hidden="0">
  <frame>
    <quad id="header_collider" posn="-160 90 15" sizen="50 20" opacity="0" scriptevents="true"/>
    <quad id="showsetting_collider" posn="-162 100 16" bgcolor="000" sizen="20 30" opacity="0." scriptevents="true" />
    <quad id="showinfo_collider" posn="-142 100 16" bgcolor="500" sizen="32 30" opacity="0." scriptevents="true" />
    <quad id="hide[show]" posn="-160 70 18" sizen="50 30" bgcolor="000" opacity="0." scriptevents="true" />
    <quad id="hide[show]" posn="-110 105 18" sizen="30 60" bgcolor="000" opacity="0." scriptevents="true" />
  </frame>

  <frame name="options" id="framesetting">
    <quad posn="-151 83 2" sizen="10 10" bgcolor="FFFA" halign="center" valign="center" style="ManiaPlanetMainMenu" substyle="IconSettings"/>
    <label posn="-142 83 0" sizen="29 14" text="SETTINGS" halign="left" valign="center2" textsize="4"/>
    <quad id="tohide" posn="-160 90 0" sizen="50 90" bgcolor="000000AA"/>
    <quad posn="-160 90 0" sizen="50 14" bgcolor="000000AA"/>
    <frame posn="-136 10 1" name="plugins">
      <frame posn="0 0 1" name="soundcloud_plugin">
        <label posn="4 -5 4" sizen="35 4" text="SOUNDCLOUD" halign="center" valign="center" textsize="1" textprefix="$t"/>
        <quad posn="-0 0 3" sizen="45 15" bgcolor="FFFFFF74" halign="center" valign="center" image="file://Media/system_1.png" opacity="0.75"/>
        <quad posn="-0 0 2" sizen="45 15" bgcolor="FF8000AA" halign="center" valign="center" image="file://Media/system_2.png" opacity="0.25" modulatecolor="FF8000FF"/>
        <quad posn="0 0 1" sizen="44 14" bgcolor="FFFA" halign="center" valign="center" image="https://upload.wikimedia.org/wikipedia/en/thumb/9/92/SoundCloud_logo.svg/1280px-SoundCloud_logo.svg.png"/>
        <quad posn="0 0 0" sizen="45 15" bgcolor="FFFA" halign="center" valign="center" image="file://Media/system_3.png"/>
        <quad posn="-0 0 -1" sizen="55 25" bgcolor="FFFA" style="Bgs1InRace" substyle="BgButtonShadow" halign="center" valign="center" opacity="0.5"/>
      </frame>
    </frame>
  </frame>

  <frame name="mapinfo" id="mapinfoframe">
    <quad posn="-110 90 0" sizen="61 80" bgcolor="FFFA"/>
    <quad posn="-110 90 0" sizen="61 20" bgcolor="FFFA"/>
  </frame>

  <frame id="mapframe" posn="0 0 10">
    <quad id="headermapquad2" posn="-162 90 0" sizen="20 20" bgcolor="000" opacity="1" scriptevents="true"/>
    <quad id="headermapquad" posn="-142 90 -1" sizen="32 20" bgcolor="000" opacity="1." scriptevents="true"/>
    <quad id="mapquad" posn="-152 83 1" halign="center" valign="center" sizen="10.5 10.5" image="https://raw.githubusercontent.com/guerro323/AyoController/master/stadium3_blurred.png" />
    <quad posn="-138 86 1" halign="center" valign="center" sizen="4.5 4.5" style="Icons64x64_1" substyle="Finish" />
    <quad posn="-138 80 1" halign="center" valign="center" sizen="4 4" image="https://raw.githubusercontent.com/guerro323/AyoController/master/creator.png" />

    <label id="mapname" posn="-134 86 1" halign="left" valign="center" textsize="1.2" sizen="22 10" textprefix="$s"/>
    <label id="creatorname" posn="-134 80 1" halign="left" valign="center" textsize="1.2" sizen="22 10" textprefix="$s"/>
    <quad id="headermapquad2" posn="-160 76 2" sizen="50 6" bgcolor="111" opacity="0.9" scriptevents="true"/>

    <frame name="tip">
      <frame id="headerbuttonsetting">
        <quad id="settingquad" posn="-152 73.5 2" halign="center" valign="center" sizen="5 5" style="ManiaPlanetMainMenu" substyle="IconSettings" scriptevents="true" />
        <label id="settinglabel" posn="-152 73.5 2" halign="center" valign="center" textsize="1.2" sizen="25 10" text="SETTINGS"/>
      </frame>
      <frame id="headerbuttonmoreinfo">
        <quad id="moreinfoquad" posn="-126 73.5 2" halign="center" valign="center" sizen="5 5" style="ManiaPlanetMainMenu" substyle="IconStore" scriptevents="true" />
        <label id="moreinfolabel" posn="-126 73.5 2" halign="center" valign="center" textsize="1" sizen="28 10" text="MORE INFORMATIONS" />
      </frame>
    </frame>
  </frame>
  <frame id="headernormal">
    <label id="bestlabel" posn="-148 87.5 0" style="TextButtonBig" sizen="25 7" text="$wBest" valign="center2" halign="center" textsize="1" opacity="0"/>
    <label id="besttimelabel" posn="-148 83 0" style="TextButtonBig" sizen="25 14" text="[.besttimelabel.]" valign="center2" halign="center" textsize="3" opacity="0"/>
    <label id="timelabel" posn="-148 83 0" style="TextButtonBig" sizen="25 14" text="timelabel" valign="center2" halign="center" textsize="3"/>
    <quad id="headerbgquad" posn="-160 90 0" sizen="50 20" bgcolor="000000AA" scriptevents="true"/>
    <label posn="-123 83 0" style="TextButtonBig" sizen="25 14" textprefix="#" text="[.recordrank.]" valign="center2" halign="center" textsize="6"/>
    <frame name="Records">
      <quad posn="-160 70.5 1" sizen="25 0.5" bgcolor="FFFFFFFF"/>
      <label posn="-148 73 0" sizen="25 6" text="LOCAL" valign="center2" halign="center" textsize="2"/>
      <label posn="-123 73 0" sizen="25 6" text="DEDIMANIA" valign="center2" halign="center" textsize="1"/>

      <quad id="buttonsbgquad" posn="-160 76 0" sizen="50 6" bgcolor="000000AA"/>
      <quad id="localbuttonbgquad" posn="-160 76 0" sizen="25 6" bgcolor="000000AA"/>
      <quad id="dedibuttonbgquad" posn="-135 76 0" sizen="25 6" bgcolor="000000AA" opacity="0"/>
      <frame id="timesframe">
        <quad id="timesbgquad" posn="-160 70 0" sizen="50 60" bgcolor="000000AA"/>
        <quad id="timesgradbgquad" posn="-160 70.5 -1" sizen="50 10" bgcolor="000000AA" style="Bgs1InRace" substyle="BgGradTop"/>
        <quad id="timesgrad2bgquad" posn="-160 20 -1" sizen="50 10" bgcolor="0000006D" style="Bgs1InRace" substyle="BgGradBottom" modulatecolor="00000087" opacity="0.5"/>
        <frame id="localrecord">
          <!-- LOCALRECORD -->
        </frame>
      </frame>
    </frame>
  </frame>
  <label id="speedlabel" posn="0 -87 0" style="TextButtonBig" scale="0.5" textsize="10" valign="center" halign="center" text="00"/>

  <frame id="chatframe" posn="-160 -85">

    <frame id="notifcationframe">
      <quad sizen="10 10" posn="0 0 1" halign="left" valign="center" style="Icons64x64_1" substyle="Inbox" />
      <label sizen="10 10" posn="10 0 1" halign="left" valign="center" text="10" style="TextButtonBig" scriptevents="1" styleactivate="true" />
    </frame>
    
    <entry posn="10 -1 1" sizen="60 5" valign="center" halign="left" id="textdialog_entry" scriptevents="1" style="TextButtonBig" focusareacolor1="0002" focusareacolor2="0003"/>

    <frame id="labelframe" posn="10 5">
      <!--<label id="chatlabel_I" sizen="60 10" halign="left" valign="center" textsize="2" text=""/>-->
      <!--CHATREPLACE-->
    </frame>
  </frame>
</frame>
		<script><!--

			#Include "TextLib" as TL
			#Include "MathLib" as ML
			#Include "AnimLib" as AL

			#Const C_BestLabelAnimTime				200
			#Const C_TimeToWaitForBestTimeLabelAnim	1000
			#Const C_TimesMenuSlide					20
			
Text TextExt_CharAt(Text string, Integer offset)
{
	if (offset <= TL::Length(string)) {
		return TL::SubString(string, offset, 1);
	}
	return "";
}
Text TextExt_Lowercase(Text string)
{
	return TL::ToLowerCase(string);
}
			
Text TextExt_StripFormat(Text string, Boolean sc, Boolean sf, Boolean sl)
{
	declare Text result;
	declare Integer length = TL::Length(string);
	if (length < 2) return string;
	declare Text[] ft = ["w", "n", "o", "i", "s"];
	declare Text[] lt = ["l", "h", "p"];
	declare Text[] ct = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
	declare Text char;
	declare Text ochar;
	declare Text state = "0";
	declare Text color = "";
	declare Text linktag = "";
	for (i, 0, length-1) {
		ochar = TextExt_CharAt(string, i);
		char = TextExt_Lowercase(ochar);
		switch (state) {
			case "0": {
				if (char == "$")
					state = "tag";
				else
					result ^= ochar;
			}
			case "tag": {
				if (ft.exists(char) && sf) {
					state = "0";
				} else if (ct.exists(char) && sc) {
					color = ochar;
					state = "c1";
				} else if (lt.exists(char) && sl) {
					linktag = char;
					state = "link";
				} else {
					result ^= "$" ^ ochar;
					state = "0";	
				}
			}
			case "c1": {
				if (ct.exists(char)) {
					color ^= char;
					state = "c2";
				} else {
					result ^= ochar;
					state = "0";
				}
			}
			case "c2": {
				if (ct.exists(char)) {
					color ^= char;
				} else {
					result ^= ochar;
				}
				state = "0";
			}
			case "link": {
				if (char == "[") {
					state = "linkurl";
				} else if (char == " ") {
					result ^= ochar;
					state = "0";
				} else {
					result ^= ochar;
				}
			}
			case "linkurl": {
				if (char == "]") {
					state = "0";
				}
			}
		}
	}
	return result;
}
Text TextExt_StripFormat(Text string)
{
	return TextExt_StripFormat(string, False, True, False);
}

			main() {
				declare CMlFrame TimesFrame = (Page.GetFirstChild("timesframe") as CMlFrame);
                declare CMlFrame FrameRecords = (Page.GetFirstChild("localrecord") as CMlFrame);
				declare CMlFrame FrameMapInfo = (Page.GetFirstChild("mapframe") as CMlFrame);
                declare CMlFrame FrameSettings = (Page.GetFirstChild("framesetting") as CMlFrame);
				declare CMlQuad TimesBgQuad = (Page.GetFirstChild("timesbgquad") as CMlQuad);
				declare CMlQuad TimesGradBgQuad = (Page.GetFirstChild("timesgradbgquad") as CMlQuad);
				declare CMlQuad TimesGrad2BgQuad = (Page.GetFirstChild("timesgrad2bgquad") as CMlQuad);
                declare CMlQuad SettingsBigQuad = (Page.GetFirstChild("tohide") as CMlQuad);
                declare CMlFrame FrameSetting = (Page.GetFirstChild("framesetting") as CMlFrame);
                declare CMlFrame MapFrame = (Page.GetFirstChild("headernormal") as CMlFrame);				

				declare CMlQuad HeaderMapQuad = (Page.GetFirstChild("headermapquad") as CMlQuad);
				
				declare CMlQuad MapQuad = (Page.GetFirstChild("mapquad") as CMlQuad);

				declare CMlLabel SpeedLabel = (Page.GetFirstChild("speedlabel") as CMlLabel);
				declare CMlLabel TimeLabel = (Page.GetFirstChild("timelabel") as CMlLabel);
				declare CMlLabel BestTimeLabel = (Page.GetFirstChild("besttimelabel") as CMlLabel);
				declare CMlLabel BestLabel = (Page.GetFirstChild("bestlabel") as CMlLabel);
				
				declare CMlLabel MapNameLabel = (Page.GetFirstChild("mapname") as CMlLabel);
				declare CMlLabel MapCreatorNameLabel = (Page.GetFirstChild("creatorname") as CMlLabel);
				
				declare CMlLabel SettingLabel = (Page.GetFirstChild("settinglabel") as CMlLabel);
				declare CMlQuad SettingQuad = (Page.GetFirstChild("settingquad") as CMlQuad);
				
				declare CMlLabel MoreInfoLabel = (Page.GetFirstChild("moreinfolabel") as CMlLabel);
				declare CMlQuad MoreInfoQuad = (Page.GetFirstChild("moreinfoquad") as CMlQuad);
        
        declare CMlFrame NotificationFrame = (Page.GetFirstChild("notifcationframe") as CMlFrame);
        declare CMlFrame ChatFrame = (Page.GetFirstChild("labelframe") as CMlFrame);
        
        declare CMlEntry ChatEntry = (Page.GetFirstChild("textdialog_entry") as CMlEntry);
        
        declare CMlLabel[] ChatLabel;
        

                declare CMlLabel[] Label_LocalRecords;
                declare CMlQuad[] Quad_LocalRecords;

                for (I, 0, ->RANK) {
                    declare CMlLabel TempLabelRecord1 <=> (Page.GetFirstChild("localrecord1_"^I) as CMlLabel);
                    declare CMlLabel TempLabelRecord2 <=> (Page.GetFirstChild("localrecord2_"^I) as CMlLabel);
                    declare CMlLabel TempLabelRecord3 <=> (Page.GetFirstChild("localrecord3_"^I) as CMlLabel);
                    if (TempLabelRecord1 == Null || TempLabelRecord2 == Null || TempLabelRecord3 == Null) continue;
                    { declare oPos for TempLabelRecord1 = TempLabelRecord1.RelativePosition; }
                    { declare oPos for TempLabelRecord2 = TempLabelRecord2.RelativePosition; }
                    { declare oPos for TempLabelRecord3 = TempLabelRecord3.RelativePosition; }
                    Label_LocalRecords.add(TempLabelRecord1);
                    Label_LocalRecords.add(TempLabelRecord2);
                    Label_LocalRecords.add(TempLabelRecord3);
                }
                for (I, 0, ->RANK) {
                    declare CMlQuad TempLabelRecord1 <=> (Page.GetFirstChild("localrecord4_"^I) as CMlQuad);
                    declare CMlQuad TempLabelRecord2 <=> (Page.GetFirstChild("localrecord5_"^I) as CMlQuad);
                    if (TempLabelRecord1 == Null || TempLabelRecord2 == Null) continue;
                    { declare oPos for TempLabelRecord1 = TempLabelRecord1.RelativePosition; }
                    { declare oPos for TempLabelRecord2 = TempLabelRecord2.RelativePosition; }
                    Quad_LocalRecords.add(TempLabelRecord1);
                    Quad_LocalRecords.add(TempLabelRecord2);
                }
                
                for (I, 0, ->CHATS) {
                    declare TempLabel <=> (Page.GetFirstChild("chatlabel_"^I) as CMlLabel);
                    ChatLabel.add(TempLabel);
                }

				declare Boolean PreviousBestLabelState for LocalUser = False;

				declare Integer TimeBestLabelStateChange for LocalUser = Now;
				
				declare Boolean PreviousMapInfoState for LocalUser = False;
				
				declare Integer TimeMapInfoState for LocalUser = Now;
				
				declare Boolean[Text] PreviousMoreSettingState for LocalUser = ["Setting" => False, "More" => False];
				
				declare Integer[Text] TimeMoreSettingState for LocalUser = ["Setting" => Now, "More" => Now];

                declare Boolean PreviousShowSettingState for LocalUser = False;
                declare Integer TimeShowSettingState for LocalUser = Now;

				declare Integer CurrentSpeed for LocalUser = 0;
				declare Integer RaceTime for LocalUser = 0;

				declare Boolean HeaderShowMapInfo for LocalUser = False;
				declare Boolean[Text] MoreSetting for LocalUser = ["Setting" => False, "More" => False];
				
                declare ShowSetting for LocalUser = False;

				declare Text CurrentShowName for LocalUser = "Setting";

                declare Integer TimeSave = 0;

				TimesFrame.ClipWindowActive = True;
				TimesFrame.ClipWindowRelativePosition = <-135., 40.>;
				TimesFrame.ClipWindowSize = <50., 60.>;

                FrameRecords.ClipWindowActive = True;
                FrameRecords.ClipWindowRelativePosition = <-135., 40.>;
                FrameRecords.ClipWindowSize = <50., 60.>;
                
                ClientUI.OverlayHideChat = True;


				while (True) {
                    if (GUIPlayer == Null) return;
					CurrentSpeed = GUIPlayer.DisplaySpeed;
					RaceTime = GUIPlayer.CurRace.Time;
                    
					foreach (Event in PendingEvents) {
                        if (Event.Type == CMlEvent::Type::MouseClick) {
                            if (Event.ControlId == "showsetting_collider") {
                                
                                if (!ShowSetting) {
                                    ShowSetting = True;
                                } else {
                                    ShowSetting = False;
                                }
							}
                        }
						if (Event.Type == CMlEvent::Type::MouseOver) {
							if (Event.ControlId == "header_collider" || (Event.ControlId == "showsetting_collider"
							|| Event.ControlId == "showinfo_collider")) {
								HeaderShowMapInfo = True;

							}
							if (Event.ControlId == "showsetting_collider") {
								MoreSetting["Setting"] = True;
								MoreSetting["More"] = False;
								CurrentShowName = "Setting";
							}
							if (Event.ControlId == "showinfo_collider") {
								MoreSetting["More"] = True;
								MoreSetting["Setting"] = False;
								CurrentShowName = "More";
							}
							if (Event.ControlId == "hide[show]") {
								HeaderShowMapInfo = False;
								MoreSetting["Setting"] = False;
								MoreSetting["More"] = False;
							}
						}
						if (Event.Type == CMlEvent::Type::MouseOut) {
							if (Event.ControlId == "header_collider" || Event.ControlId == "hide[show]") {
								if (!MoreSetting["Setting"]) {
									HeaderShowMapInfo = False;
								}
								if (!MoreSetting["More"]) {
									HeaderShowMapInfo = False;
								}
							}
							if (Event.ControlId == "showsetting_collider") {
								MoreSetting["Setting"] = False;
								MoreSetting["More"] = False;
							}
							if (Event.ControlId == "showinfo_collider") {
								MoreSetting["More"] = False;
								MoreSetting["Setting"] = False;
							}
						}
            if (Event.Type == CMlEvent::Type::EntrySubmit) {
              TriggerPageAction("Message["^ChatEntry.Value^"]");
              ChatEntry.Value = "";
            }
					}
					if (MapNameLabel.Value != Map.MapName || MapCreatorNameLabel.Value != Map.AuthorNickName) {
						MapNameLabel.Value = "$"^TL::ColorToText(LocalUser.Color)^""^Map.MapName;
						MapCreatorNameLabel.Value = TextExt_StripFormat("$"^TL::ColorToText(LocalUser.Color)^"by "^Map.AuthorNickName);

                        if (Map.CollectionName == "Canyon") {
						    MapQuad.ModulateColor = <1., 0.1, 0.>;
						    HeaderMapQuad.BgColor = <0.4, 0.1, 0.>;
                        }
                        if (Map.CollectionName == "Valley") {
						    MapQuad.ModulateColor = <0.1, 0.9, 0.1>;
						    HeaderMapQuad.BgColor = <0.05, 0.5, 0.05>;
                        }
                        if (Map.CollectionName == "Stadium") {
						    MapQuad.ModulateColor = <0., 0.9, 0.>;
						    HeaderMapQuad.BgColor = <0., 0.5, 0.>;
                        }
					}
					
					if (HeaderShowMapInfo) {
						if (!PreviousMapInfoState) {
							TimeMapInfoState = Now + 10;
							PreviousMapInfoState = True;
						}
						declare Transition = AL::EaseInOutQuad(Now - TimeMapInfoState, 0., 1., C_BestLabelAnimTime);
						FrameMapInfo.RelativePosition[1] = 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;
					} else {
						if (PreviousMapInfoState) {
							TimeMapInfoState = Now + 250;
							PreviousMapInfoState = False;
						}
						declare Transition = AL::EaseInOutQuad(Now - TimeMapInfoState, 1., -1., C_BestLabelAnimTime);
						FrameMapInfo.RelativePosition[1] = 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;
					}

					if (ShowSetting) {
						if (!PreviousShowSettingState) {
							TimeShowSettingState = Now + 10;
							PreviousShowSettingState = True;
						}
						declare Transition = AL::EaseInOutQuad(Now - TimeShowSettingState, 0., 1., C_BestLabelAnimTime);
                        declare FrameTransition = AL::EaseInOutQuad(Now - TimeShowSettingState, 0., 1., C_BestLabelAnimTime);
                        declare Transition2 = AL::EaseInOutQuad(Now - TimeShowSettingState, 0., 4., C_BestLabelAnimTime);
						FrameSettings.RelativePosition[1] = 40 - C_TimesMenuSlide - FrameTransition * C_TimesMenuSlide;
                        MapFrame.RelativePosition[0] = 20 - C_TimesMenuSlide - Transition2 * C_TimesMenuSlide;
                        TimesFrame.RelativePosition[0] = 20 - C_TimesMenuSlide - Transition2 * C_TimesMenuSlide;
                        SettingsBigQuad.Opacity = Transition;
					} else {
						if (PreviousShowSettingState) {
							TimeShowSettingState = Now + 10;
							PreviousShowSettingState = False;
						}
						declare Transition = AL::EaseInOutQuad(Now - TimeShowSettingState, 1., -1., C_BestLabelAnimTime);
                        declare FrameTransition = AL::EaseInOutQuad(Now - TimeShowSettingState, 1., -7., C_BestLabelAnimTime*2);
                        declare Transition2 = AL::EaseInOutQuad(Now - TimeShowSettingState, 1., -1., C_BestLabelAnimTime);
						FrameSettings.RelativePosition[1] = 40 - C_TimesMenuSlide - FrameTransition * C_TimesMenuSlide;
                        TimesFrame.RelativePosition[0] = 20 - C_TimesMenuSlide - Transition2 * (C_TimesMenuSlide*2);
                        MapFrame.RelativePosition[0] = 20 - C_TimesMenuSlide - Transition2 * (C_TimesMenuSlide*2);
                        SettingsBigQuad.Opacity = Transition;
					}
					
					if (MoreSetting[CurrentShowName]) {
						if (!PreviousMoreSettingState[CurrentShowName]) {
							TimeMoreSettingState[CurrentShowName] = Now + 10;
							PreviousMoreSettingState[CurrentShowName] = True;
							if (CurrentShowName == "Setting") {
								TimeMoreSettingState["More"] = Now + 250;
							}
							if (CurrentShowName == "More") {
								TimeMoreSettingState["Setting"] = Now + 250;
							}
						}
						declare Transition = AL::EaseInOutQuad(Now - TimeMoreSettingState[CurrentShowName], 0., 1., C_BestLabelAnimTime);
						if (CurrentShowName == "Setting") {
							SettingLabel.Opacity = Transition;
							SettingLabel.RelativeScale = 1.5 - Transition / 2.;
							SettingQuad.Opacity = 1. - Transition;
							SettingQuad.RelativeScale = 1.5 - Transition / 2.;
							{
								declare Transition2 = AL::EaseInOutQuad(Now - TimeMoreSettingState["More"], 1., -1., C_BestLabelAnimTime);
								MoreInfoLabel.Opacity = Transition2;
								MoreInfoLabel.RelativeScale = 1.5 - Transition2 / 2.;
								MoreInfoQuad.Opacity = 1. - Transition2;
								MoreInfoQuad.RelativeScale = 1.5 - Transition2 / 2.;							
							}
						}
						if (CurrentShowName == "More") {
							MoreInfoLabel.Opacity = Transition;
							MoreInfoLabel.RelativeScale = 1.5 - Transition / 2.;
							MoreInfoQuad.Opacity = 1. - Transition;
							MoreInfoQuad.RelativeScale = 1.5 - Transition / 2.;
							{
								declare Transition2 = AL::EaseInOutQuad(Now - TimeMoreSettingState["Setting"], 1., -1., C_BestLabelAnimTime);
								SettingLabel.Opacity = Transition2;
								SettingLabel.RelativeScale = 1.5 - Transition2 / 2.;
								SettingQuad.Opacity = 1. - Transition2;
								SettingQuad.RelativeScale = 1 - Transition2 / 2.;							
							}
						}
					} else {
						if (PreviousMoreSettingState[CurrentShowName]) {
							TimeMoreSettingState[CurrentShowName] = Now + 250;
							PreviousMoreSettingState[CurrentShowName] = False;
							if (CurrentShowName == "Setting") {
								TimeMoreSettingState["More"] = Now + 250;
							}
							if (CurrentShowName == "More") {
								TimeMoreSettingState["Setting"] = Now + 250;
							}
						}
						declare Transition = AL::EaseInOutQuad(Now - TimeMoreSettingState[CurrentShowName], 1., -1., C_BestLabelAnimTime);
						if (CurrentShowName == "Setting") {
							SettingLabel.Opacity = Transition;
							SettingLabel.RelativeScale = 1.5 - Transition / 2.;
							SettingQuad.Opacity = 1. - Transition;
							SettingQuad.RelativeScale = 1 - Transition / 2.;
							{
								declare Transition2 = AL::EaseInOutQuad(Now - TimeMoreSettingState["More"], 0., 1., C_BestLabelAnimTime);
								MoreInfoLabel.Opacity = Transition2;
								MoreInfoLabel.RelativeScale = 1.5 - Transition2 / 2.;
								MoreInfoQuad.Opacity = 1. - Transition2;
								MoreInfoQuad.RelativeScale = 1.5 - Transition2 / 2.;							
							}
						}
						if (CurrentShowName == "More") {
							MoreInfoLabel.Opacity = Transition;
							MoreInfoLabel.RelativeScale = 1.5 - Transition / 2.;
							MoreInfoQuad.Opacity = 1. - Transition;
							MoreInfoQuad.RelativeScale = 1.5 - Transition / 2.;
							{
								declare Transition2 = AL::EaseInOutQuad(Now - TimeMoreSettingState["Setting"], 0., 1., C_BestLabelAnimTime);
								SettingLabel.Opacity = Transition2;
								SettingLabel.RelativeScale = 1.5 - Transition2 / 2.;
								SettingQuad.Opacity = 1. - Transition2;
								SettingQuad.RelativeScale = 1.5 - Transition2 / 2.;
							}
						}
					}
					
					if (CurrentSpeed < 10. && GUIPlayer.Login == LocalUser.Login) {
						if (!PreviousBestLabelState) {
							TimeBestLabelStateChange = Now + C_TimeToWaitForBestTimeLabelAnim;
							PreviousBestLabelState = True;
						}
                       // ClientUI.OverlayHideChat = False;
                        ClientUI.UISequence = CUIConfig::EUISequence::Playing;
						declare Transition = AL::EaseInOutQuad(Now - TimeBestLabelStateChange, 0., 1., C_BestLabelAnimTime);
						BestLabel.Opacity = Transition;
						BestTimeLabel.Opacity = Transition;
						TimeLabel.Opacity = 1. - Transition;
            
            ChatFrame.RelativeScale = Transition;
            NotificationFrame.RelativeScale = 1- Transition;

						TimesBgQuad.Opacity = Transition;
						TimesBgQuad.RelativePosition[1] = 110 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;

						TimesGradBgQuad.Opacity = Transition;
						TimesGradBgQuad.RelativePosition[1] = 110.5 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;

						TimesGrad2BgQuad.Opacity = Transition;
						TimesGrad2BgQuad.RelativePosition[1] = 60 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;

                        FrameRecords.RelativePosition[1] = 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;

                        foreach (RecordTime in Label_LocalRecords) {
                            if (RecordTime == Null) continue;
                            declare Vec3 oPos for RecordTime;
                            RecordTime.RelativePosition[1] = ( oPos[1] + 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide);
                            RecordTime.Opacity = Transition;
                        }
                        foreach (RecordTime in Quad_LocalRecords) {
                            if (RecordTime == Null) continue;
                            declare Vec3 oPos for RecordTime;
                            RecordTime.RelativePosition[1] = ( oPos[1] + 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide);
                            RecordTime.Opacity = Transition;
                        }


						TimeLabel.RelativeScale = Transition;
						BestTimeLabel.RelativeScale = Transition ;
					} else if (GUIPlayer.Login == LocalUser.Login) {
                        if (Now + 1000 > TimeSave && TimeSave != 0) {
                            TimeSave = Now + 1000;
                        }
                        if (Now + 500 > TimeSave || TimeSave == 0) {
                            TimeBestLabelStateChange = Now + C_TimeToWaitForBestTimeLabelAnim;
                            TimeSave = Now + 50000;
                        }
						if (PreviousBestLabelState) {
							TimeBestLabelStateChange = Now + C_TimeToWaitForBestTimeLabelAnim;
							PreviousBestLabelState = False;
						}
                       // ClientUI.OverlayHideChat = True;
                        ClientUI.UISequence = CUIConfig::EUISequence::Playing;
						declare Transition = AL::EaseInOutQuad(Now - TimeBestLabelStateChange, 1., -1., C_BestLabelAnimTime);
						BestLabel.Opacity = Transition;
						BestTimeLabel.Opacity = Transition;
						TimeLabel.Opacity = 1. - Transition;

						TimesBgQuad.Opacity = Transition;
						TimesBgQuad.RelativePosition[1] = 110 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;

						TimesGradBgQuad.Opacity = Transition;
						TimesGradBgQuad.RelativePosition[1] = 110.5 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;
						
						TimesGrad2BgQuad.Opacity = Transition;
						TimesGrad2BgQuad.RelativePosition[1] = 60 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;

                        FrameRecords.RelativePosition[1] = 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide;
                        
                        foreach (RecordTime in Label_LocalRecords) {
                            if (RecordTime == Null) continue;
                            declare Vec3 oPos for RecordTime;
                            RecordTime.RelativePosition[1] = ( oPos[1] + 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide);
                            RecordTime.Opacity = Transition;
                        }
                        foreach (RecordTime in Quad_LocalRecords) {
                            if (RecordTime == Null) continue;
                            declare Vec3 oPos for RecordTime;
                            RecordTime.RelativePosition[1] = ( oPos[1] + 40 - C_TimesMenuSlide - Transition * C_TimesMenuSlide);
                            RecordTime.Opacity = Transition;
                        }

						TimeLabel.RelativeScale = 1 - Transition / 2.;
						BestTimeLabel.RelativeScale = 1.5 - Transition / 2.;
            
            ChatFrame.RelativeScale = Transition;
            NotificationFrame.RelativeScale = 1 - Transition;
					}
					
         
					
					SpeedLabel.SetText("$s" ^ TL::ToText(CurrentSpeed));
					SpeedLabel.TextSize = 10;
					SpeedLabel.RelativeScale = AL::EaseInOutQuad(CurrentSpeed, 0.5, 5., 1000);
					SpeedLabel.RelativePosition[0] = ML::Rand(-1., 1.) * (CurrentSpeed / 1000.);
					SpeedLabel.RelativePosition[1] = -87 + AL::EaseInOutQuad(CurrentSpeed, 0., 25., 1000) + ML::Rand(-1., 1.) * (CurrentSpeed / 1000.);
					TimeLabel.SetText(TL::TimeToText(RaceTime, True));
          
          yield;
				}
			}
		-->
		</script>